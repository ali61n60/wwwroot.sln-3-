(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SingleTemperature = /** @class */ (function () {
    function SingleTemperature() {
    }
    return SingleTemperature;
}());
var SinglePoint = /** @class */ (function () {
    function SinglePoint() {
    }
    return SinglePoint;
}());
var Temerature = /** @class */ (function () {
    function Temerature() {
        this.dataInputId = "inputTemperature";
        this._dataPoints = [];
        this.initDataPoints();
        this.draw();
    }
    Temerature.prototype.initDataPoints = function () {
        var _this = this;
        var dataString = $("#" + this.dataInputId).val().toString();
        var allTemperatures = $.parseJSON(dataString);
        allTemperatures.forEach(function (temperature) {
            var date = new Date(temperature.insertDateTime); // some mock date
            var milliseconds = date.getTime();
            _this._dataPoints.push({ x: milliseconds, y: temperature.temp });
        });
    };
    //    =[{ x: 1501048673000, y: 35.939 },
    //    { x: 1501052273000, y: 40.896 },
    //    { x: 1501055873000, y: 56.625 },
    //    { x: 1501059473000, y: 26.003 },
    //    { x: 1501063073000, y: 20.376 },
    //    { x: 1501066673000, y: 19.774 },
    //    { x: 1501070273000, y: 23.508 },
    //    { x: 1501073873000, y: 18.577 },
    //    { x: 1501077473000, y: 15.918 },
    //    { x: 1501081073000, y: null }, // Null Data
    //    { x: 1501084673000, y: 10.314 },
    //    { x: 1501088273000, y: 10.574 },
    //    { x: 1501091873000, y: 14.422 },
    //    { x: 1501095473000, y: 18.576 },
    //    { x: 1501099073000, y: 22.342 },
    //    { x: 1501102673000, y: 22.836 },
    //    { x: 1501106273000, y: 23.220 },
    //    { x: 1501109873000, y: 23.594 },
    //    { x: 1501113473000, y: 24.596 },
    //    { x: 1501117073000, y: 31.947 },
    //    { x: 1501120673000, y: 31.142 },
    //    { x: 111, y: 100 }
    //];
    Temerature.prototype.draw = function () {
        var chart = new CanvasJS.Chart("chartContainer", {
            animationEnabled: true,
            title: {
                text: "Hourly Average CPU Utilization"
            },
            axisX: {
                title: "Time"
            },
            axisY: {
                title: "Percentage",
                suffix: "%"
            },
            data: [
                {
                    type: "line",
                    name: "CPU Utilization",
                    connectNullData: true,
                    //nullDataLineDashType: "solid",
                    xValueType: "dateTime",
                    xValueFormatString: "DD MMM hh:mm TT",
                    yValueFormatString: "#,##0.##\"%\"",
                    dataPoints: this._dataPoints
                }
            ]
        });
        chart.render();
    };
    return Temerature;
}());
exports.Temerature = Temerature;
$(document).ready(function () {
    var temerature = new Temerature();
}); //ready
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJ3d3dyb290L2pzL1RlbXBlcmF0dXJlL3NyYy9UZW1wZXJhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUM7SUFBQTtJQUlELENBQUM7SUFBRCx3QkFBQztBQUFELENBSkMsQUFJQSxJQUFBO0FBRUQ7SUFBQTtJQUdBLENBQUM7SUFBRCxrQkFBQztBQUFELENBSEEsQUFHQyxJQUFBO0FBRUQ7SUFHSTtRQUZpQixnQkFBVyxHQUFRLGtCQUFrQixDQUFDO1FBbUIvQyxnQkFBVyxHQUFxQixFQUFFLENBQUU7UUFoQnhDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVPLG1DQUFjLEdBQXRCO1FBQUEsaUJBVUM7UUFSRyxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1RCxJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBd0IsQ0FBQztRQUVyRSxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQUMsV0FBVztZQUNoQyxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7WUFDbEUsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2xDLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRyxDQUFDLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBR0Qsd0NBQXdDO0lBQ3hDLHNDQUFzQztJQUN0QyxzQ0FBc0M7SUFDdEMsc0NBQXNDO0lBQ3RDLHNDQUFzQztJQUN0QyxzQ0FBc0M7SUFDdEMsc0NBQXNDO0lBQ3RDLHNDQUFzQztJQUN0QyxzQ0FBc0M7SUFDdEMsaURBQWlEO0lBQ2pELHNDQUFzQztJQUN0QyxzQ0FBc0M7SUFDdEMsc0NBQXNDO0lBQ3RDLHNDQUFzQztJQUN0QyxzQ0FBc0M7SUFDdEMsc0NBQXNDO0lBQ3RDLHNDQUFzQztJQUN0QyxzQ0FBc0M7SUFDdEMsc0NBQXNDO0lBQ3RDLHNDQUFzQztJQUN0QyxzQ0FBc0M7SUFDdEMsd0JBQXdCO0lBQ3hCLElBQUk7SUFFSSx5QkFBSSxHQUFaO1FBRUksSUFBSSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUMzQztZQUNJLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsS0FBSyxFQUFFO2dCQUNILElBQUksRUFBRSxnQ0FBZ0M7YUFDekM7WUFDRCxLQUFLLEVBQUU7Z0JBQ0gsS0FBSyxFQUFFLE1BQU07YUFDaEI7WUFDRCxLQUFLLEVBQUU7Z0JBQ0gsS0FBSyxFQUFFLFlBQVk7Z0JBQ25CLE1BQU0sRUFBRSxHQUFHO2FBQ2Q7WUFDRCxJQUFJLEVBQUU7Z0JBQ0Y7b0JBQ0ksSUFBSSxFQUFFLE1BQU07b0JBQ1osSUFBSSxFQUFFLGlCQUFpQjtvQkFDdkIsZUFBZSxFQUFFLElBQUk7b0JBQ3JCLGdDQUFnQztvQkFDaEMsVUFBVSxFQUFFLFVBQVU7b0JBQ3RCLGtCQUFrQixFQUFFLGlCQUFpQjtvQkFDckMsa0JBQWtCLEVBQUUsZUFBZTtvQkFDbkMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXO2lCQUMvQjthQUNKO1NBQ0osQ0FBQyxDQUFDO1FBQ1AsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFDTCxpQkFBQztBQUFELENBM0VBLEFBMkVDLElBQUE7QUEzRVksZ0NBQVU7QUE2RXZCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDZCxJQUFJLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQ3RDLENBQUMsQ0FBQyxDQUFDLENBQUEsT0FBTyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCLvu79jbGFzcyBTaW5nbGVUZW1wZXJhdHVyZSB7XHJcbiAgICBwdWJsaWMgdGVtcGVyYXR1cmVJZDogbnVtYmVyO1xyXG4gICAgcHVibGljIHRlbXA6IG51bWJlcjtcclxuICAgIHB1YmxpYyBpbnNlcnREYXRlVGltZTpudW1iZXI7XHJcbn1cclxuXHJcbmNsYXNzIFNpbmdsZVBvaW50IHtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGVtZXJhdHVyZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRhdGFJbnB1dElkOnN0cmluZz1cImlucHV0VGVtcGVyYXR1cmVcIjtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0RGF0YVBvaW50cygpO1xyXG4gICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdERhdGFQb2ludHMoKTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGRhdGFTdHJpbmcgPSAkKFwiI1wiICsgdGhpcy5kYXRhSW5wdXRJZCkudmFsKCkudG9TdHJpbmcoKTtcclxuICAgICAgICBsZXQgYWxsVGVtcGVyYXR1cmVzID0gJC5wYXJzZUpTT04oZGF0YVN0cmluZykgYXMgU2luZ2xlVGVtcGVyYXR1cmVbXTtcclxuXHJcbiAgICAgICAgYWxsVGVtcGVyYXR1cmVzLmZvckVhY2goKHRlbXBlcmF0dXJlKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodGVtcGVyYXR1cmUuaW5zZXJ0RGF0ZVRpbWUpOyAvLyBzb21lIG1vY2sgZGF0ZVxyXG4gICAgICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRUaW1lKCk7IFxyXG4gICAgICAgICAgICB0aGlzLl9kYXRhUG9pbnRzLnB1c2goeyB4OiBtaWxsaXNlY29uZHMgLCB5OiB0ZW1wZXJhdHVyZS50ZW1wIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2RhdGFQb2ludHM6IEFycmF5PFNpbmdsZVBvaW50Pj1bXSA7XHJcbiAgICAvLyAgICA9W3sgeDogMTUwMTA0ODY3MzAwMCwgeTogMzUuOTM5IH0sXHJcbiAgICAvLyAgICB7IHg6IDE1MDEwNTIyNzMwMDAsIHk6IDQwLjg5NiB9LFxyXG4gICAgLy8gICAgeyB4OiAxNTAxMDU1ODczMDAwLCB5OiA1Ni42MjUgfSxcclxuICAgIC8vICAgIHsgeDogMTUwMTA1OTQ3MzAwMCwgeTogMjYuMDAzIH0sXHJcbiAgICAvLyAgICB7IHg6IDE1MDEwNjMwNzMwMDAsIHk6IDIwLjM3NiB9LFxyXG4gICAgLy8gICAgeyB4OiAxNTAxMDY2NjczMDAwLCB5OiAxOS43NzQgfSxcclxuICAgIC8vICAgIHsgeDogMTUwMTA3MDI3MzAwMCwgeTogMjMuNTA4IH0sXHJcbiAgICAvLyAgICB7IHg6IDE1MDEwNzM4NzMwMDAsIHk6IDE4LjU3NyB9LFxyXG4gICAgLy8gICAgeyB4OiAxNTAxMDc3NDczMDAwLCB5OiAxNS45MTggfSxcclxuICAgIC8vICAgIHsgeDogMTUwMTA4MTA3MzAwMCwgeTogbnVsbCB9LCAvLyBOdWxsIERhdGFcclxuICAgIC8vICAgIHsgeDogMTUwMTA4NDY3MzAwMCwgeTogMTAuMzE0IH0sXHJcbiAgICAvLyAgICB7IHg6IDE1MDEwODgyNzMwMDAsIHk6IDEwLjU3NCB9LFxyXG4gICAgLy8gICAgeyB4OiAxNTAxMDkxODczMDAwLCB5OiAxNC40MjIgfSxcclxuICAgIC8vICAgIHsgeDogMTUwMTA5NTQ3MzAwMCwgeTogMTguNTc2IH0sXHJcbiAgICAvLyAgICB7IHg6IDE1MDEwOTkwNzMwMDAsIHk6IDIyLjM0MiB9LFxyXG4gICAgLy8gICAgeyB4OiAxNTAxMTAyNjczMDAwLCB5OiAyMi44MzYgfSxcclxuICAgIC8vICAgIHsgeDogMTUwMTEwNjI3MzAwMCwgeTogMjMuMjIwIH0sXHJcbiAgICAvLyAgICB7IHg6IDE1MDExMDk4NzMwMDAsIHk6IDIzLjU5NCB9LFxyXG4gICAgLy8gICAgeyB4OiAxNTAxMTEzNDczMDAwLCB5OiAyNC41OTYgfSxcclxuICAgIC8vICAgIHsgeDogMTUwMTExNzA3MzAwMCwgeTogMzEuOTQ3IH0sXHJcbiAgICAvLyAgICB7IHg6IDE1MDExMjA2NzMwMDAsIHk6IDMxLjE0MiB9LFxyXG4gICAgLy8gICAgeyB4OiAxMTEsIHk6IDEwMCB9XHJcbiAgICAvL107XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3KCk6IHZvaWQge1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQ2FudmFzSlMuQ2hhcnQoXCJjaGFydENvbnRhaW5lclwiLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25FbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkhvdXJseSBBdmVyYWdlIENQVSBVdGlsaXphdGlvblwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1g6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJUaW1lXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzWToge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlBlcmNlbnRhZ2VcIixcclxuICAgICAgICAgICAgICAgICAgICBzdWZmaXg6IFwiJVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGF0YTogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQ1BVIFV0aWxpemF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3ROdWxsRGF0YTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9udWxsRGF0YUxpbmVEYXNoVHlwZTogXCJzb2xpZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4VmFsdWVUeXBlOiBcImRhdGVUaW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhWYWx1ZUZvcm1hdFN0cmluZzogXCJERCBNTU0gaGg6bW0gVFRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgeVZhbHVlRm9ybWF0U3RyaW5nOiBcIiMsIyMwLiMjXFxcIiVcXFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQb2ludHM6IHRoaXMuX2RhdGFQb2ludHNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG59XHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XHJcbiAgICBsZXQgdGVtZXJhdHVyZSA9IG5ldyBUZW1lcmF0dXJlKCk7XHJcbn0pOy8vcmVhZHlcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19
